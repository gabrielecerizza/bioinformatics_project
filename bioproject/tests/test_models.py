import kerastuner as kt
from kerastuner import Hyperband

from bioproject.data_processing import get_cnn_sequence
from bioproject.models import *


def test_build_ffnn_iwbbio2020(random_dataset, capsys):
    X_train, _, _, _, _, _ = random_dataset
    build_ffnn_iwbbio2020(X_train)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "ffnn_IWBBIO2020"
    _________________________________________________________________
    Layer (type)                 Output Shape              Param #   
    =================================================================
    dense (Dense)                (None, 256)               1536      
    _________________________________________________________________
    dense_1 (Dense)              (None, 128)               32896     
    _________________________________________________________________
    dense_2 (Dense)              (None, 64)                8256      
    _________________________________________________________________
    dense_3 (Dense)              (None, 1)                 65        
    =================================================================
    Total params: 42,753
    Trainable params: 42,753
    Non-trainable params: 0
    _________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_ffnn(random_dataset, capsys):
    X_train, _, _, _, _, _ = random_dataset
    build_ffnn(X_train)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "ffnn"
    _________________________________________________________________
    Layer (type)                 Output Shape              Param #   
    =================================================================
    input_epigenomic_data (Input [(None, 5)]               0         
    _________________________________________________________________
    dense_4 (Dense)              (None, 192)               1152      
    _________________________________________________________________
    last_hidden_ffnn (Dense)     (None, 192)               37056     
    _________________________________________________________________
    dense_5 (Dense)              (None, 1)                 193       
    =================================================================
    Total params: 38,401
    Trainable params: 38,401
    Non-trainable params: 0
    _________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_cnn_iwbbio2020(window_size, capsys):
    build_cnn_iwbbio2020(window_size)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "cnn_IWBBIO2020"
    _________________________________________________________________
    Layer (type)                 Output Shape              Param #   
    =================================================================
    conv1d (Conv1D)              (None, 252, 64)           1344      
    _________________________________________________________________
    batch_normalization (BatchNo (None, 252, 64)           256       
    _________________________________________________________________
    re_lu (ReLU)                 (None, 252, 64)           0         
    _________________________________________________________________
    conv1d_1 (Conv1D)            (None, 248, 64)           20544     
    _________________________________________________________________
    batch_normalization_1 (Batch (None, 248, 64)           256       
    _________________________________________________________________
    re_lu_1 (ReLU)               (None, 248, 64)           0         
    _________________________________________________________________
    conv1d_2 (Conv1D)            (None, 244, 64)           20544     
    _________________________________________________________________
    batch_normalization_2 (Batch (None, 244, 64)           256       
    _________________________________________________________________
    re_lu_2 (ReLU)               (None, 244, 64)           0         
    _________________________________________________________________
    max_pooling1d (MaxPooling1D) (None, 122, 64)           0         
    _________________________________________________________________
    conv1d_3 (Conv1D)            (None, 113, 64)           41024     
    _________________________________________________________________
    batch_normalization_3 (Batch (None, 113, 64)           256       
    _________________________________________________________________
    re_lu_3 (ReLU)               (None, 113, 64)           0         
    _________________________________________________________________
    max_pooling1d_1 (MaxPooling1 (None, 56, 64)            0         
    _________________________________________________________________
    flatten (Flatten)            (None, 3584)              0         
    _________________________________________________________________
    dense_6 (Dense)              (None, 64)                229440    
    _________________________________________________________________
    dropout (Dropout)            (None, 64)                0         
    _________________________________________________________________
    dense_7 (Dense)              (None, 64)                4160      
    _________________________________________________________________
    dropout_1 (Dropout)          (None, 64)                0         
    _________________________________________________________________
    dense_8 (Dense)              (None, 1)                 65        
    =================================================================
    Total params: 318,145
    Trainable params: 317,633
    Non-trainable params: 512
    _________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_deep_enhancer(window_size, capsys):
    build_deep_enhancer(window_size)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "deep_enhancer"
    _________________________________________________________________
    Layer (type)                 Output Shape              Param #   
    =================================================================
    conv1d_4 (Conv1D)            (None, 249, 128)          4224      
    _________________________________________________________________
    batch_normalization_4 (Batch (None, 249, 128)          512       
    _________________________________________________________________
    re_lu_4 (ReLU)               (None, 249, 128)          0         
    _________________________________________________________________
    conv1d_5 (Conv1D)            (None, 242, 128)          131200    
    _________________________________________________________________
    batch_normalization_5 (Batch (None, 242, 128)          512       
    _________________________________________________________________
    re_lu_5 (ReLU)               (None, 242, 128)          0         
    _________________________________________________________________
    max_pooling1d_2 (MaxPooling1 (None, 121, 128)          0         
    _________________________________________________________________
    conv1d_6 (Conv1D)            (None, 119, 64)           24640     
    _________________________________________________________________
    batch_normalization_6 (Batch (None, 119, 64)           256       
    _________________________________________________________________
    re_lu_6 (ReLU)               (None, 119, 64)           0         
    _________________________________________________________________
    conv1d_7 (Conv1D)            (None, 117, 64)           12352     
    _________________________________________________________________
    batch_normalization_7 (Batch (None, 117, 64)           256       
    _________________________________________________________________
    re_lu_7 (ReLU)               (None, 117, 64)           0         
    _________________________________________________________________
    max_pooling1d_3 (MaxPooling1 (None, 58, 64)            0         
    _________________________________________________________________
    flatten_1 (Flatten)          (None, 3712)              0         
    _________________________________________________________________
    dense_9 (Dense)              (None, 256)               950528    
    _________________________________________________________________
    dropout_2 (Dropout)          (None, 256)               0         
    _________________________________________________________________
    dense_10 (Dense)             (None, 128)               32896     
    _________________________________________________________________
    dense_11 (Dense)             (None, 1)                 129       
    =================================================================
    Total params: 1,157,505
    Trainable params: 1,156,737
    Non-trainable params: 768
    _________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_deepcape(window_size, capsys):
    build_deepcape(window_size)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "deepcape"
    __________________________________________________________________________________________________
    Layer (type)                    Output Shape         Param #     Connected to                     
    ==================================================================================================
    input_4 (InputLayer)            [(None, 256, 4)]     0                                            
    __________________________________________________________________________________________________
    reshape (Reshape)               (None, 256, 4, 1)    0           input_4[0][0]                    
    __________________________________________________________________________________________________
    conv2d (Conv2D)                 (None, 249, 1, 128)  4224        reshape[0][0]                    
    __________________________________________________________________________________________________
    conv2d_1 (Conv2D)               (None, 249, 1, 64)   8256        conv2d[0][0]                     
    __________________________________________________________________________________________________
    conv2d_2 (Conv2D)               (None, 249, 1, 64)   12352       conv2d_1[0][0]                   
    __________________________________________________________________________________________________
    conv2d_3 (Conv2D)               (None, 249, 1, 128)  8320        conv2d_2[0][0]                   
    __________________________________________________________________________________________________
    max_pooling2d (MaxPooling2D)    (None, 124, 1, 128)  0           conv2d_3[0][0]                   
    __________________________________________________________________________________________________
    conv2d_4 (Conv2D)               (None, 124, 1, 64)   24640       max_pooling2d[0][0]              
    __________________________________________________________________________________________________
    conv2d_5 (Conv2D)               (None, 124, 1, 64)   12352       conv2d_4[0][0]                   
    __________________________________________________________________________________________________
    conv2d_6 (Conv2D)               (None, 124, 1, 128)  8320        conv2d_5[0][0]                   
    __________________________________________________________________________________________________
    concatenate (Concatenate)       (None, 249, 1, 128)  0           conv2d_1[0][0]                   
                                                                     conv2d_2[0][0]                   
    __________________________________________________________________________________________________
    concatenate_1 (Concatenate)     (None, 124, 1, 128)  0           conv2d_4[0][0]                   
                                                                     conv2d_5[0][0]                   
    __________________________________________________________________________________________________
    max_pooling2d_1 (MaxPooling2D)  (None, 62, 1, 128)   0           conv2d_6[0][0]                   
    __________________________________________________________________________________________________
    concatenate_2 (Concatenate)     (None, 684, 1, 128)  0           conv2d[0][0]                     
                                                                     concatenate[0][0]                
                                                                     concatenate_1[0][0]              
                                                                     max_pooling2d_1[0][0]            
    __________________________________________________________________________________________________
    flatten_2 (Flatten)             (None, 87552)        0           concatenate_2[0][0]              
    __________________________________________________________________________________________________
    dense_12 (Dense)                (None, 512)          44827136    flatten_2[0][0]                  
    __________________________________________________________________________________________________
    dense_13 (Dense)                (None, 256)          131328      dense_12[0][0]                   
    __________________________________________________________________________________________________
    dropout_3 (Dropout)             (None, 256)          0           dense_13[0][0]                   
    __________________________________________________________________________________________________
    dense_14 (Dense)                (None, 128)          32896       dropout_3[0][0]                  
    __________________________________________________________________________________________________
    dense_15 (Dense)                (None, 1)            129         dense_14[0][0]                   
    ==================================================================================================
    Total params: 45,069,953
    Trainable params: 45,069,953
    Non-trainable params: 0
    __________________________________________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_decode(enhancers_data, capsys):
    X_epigenomic, _, _ = enhancers_data
    build_decode(X_epigenomic.values)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "decode"
    __________________________________________________________________________________________________
    Layer (type)                    Output Shape         Param #     Connected to                     
    ==================================================================================================
    input_5 (InputLayer)            [(None, 429)]        0                                            
    __________________________________________________________________________________________________
    reshape_1 (Reshape)             (None, 429, 1)       0           input_5[0][0]                    
    __________________________________________________________________________________________________
    conv1d_8 (Conv1D)               (None, 429, 128)     1408        reshape_1[0][0]                  
    __________________________________________________________________________________________________
    global_average_pooling1d (Globa (None, 128)          0           conv1d_8[0][0]                   
    __________________________________________________________________________________________________
    dense_16 (Dense)                (None, 8)            1032        global_average_pooling1d[0][0]   
    __________________________________________________________________________________________________
    dense_17 (Dense)                (None, 128)          1152        dense_16[0][0]                   
    __________________________________________________________________________________________________
    multiply (Multiply)             (None, 429, 128)     0           conv1d_8[0][0]                   
                                                                     dense_17[0][0]                   
    __________________________________________________________________________________________________
    conv1d_9 (Conv1D)               (None, 429, 64)      81984       multiply[0][0]                   
    __________________________________________________________________________________________________
    global_average_pooling1d_1 (Glo (None, 64)           0           conv1d_9[0][0]                   
    __________________________________________________________________________________________________
    dense_18 (Dense)                (None, 4)            260         global_average_pooling1d_1[0][0] 
    __________________________________________________________________________________________________
    dense_19 (Dense)                (None, 64)           320         dense_18[0][0]                   
    __________________________________________________________________________________________________
    multiply_1 (Multiply)           (None, 429, 64)      0           conv1d_9[0][0]                   
                                                                     dense_19[0][0]                   
    __________________________________________________________________________________________________
    conv1d_10 (Conv1D)              (None, 429, 64)      41024       multiply_1[0][0]                 
    __________________________________________________________________________________________________
    global_average_pooling1d_2 (Glo (None, 64)           0           conv1d_10[0][0]                  
    __________________________________________________________________________________________________
    dense_20 (Dense)                (None, 4)            260         global_average_pooling1d_2[0][0] 
    __________________________________________________________________________________________________
    dense_21 (Dense)                (None, 64)           320         dense_20[0][0]                   
    __________________________________________________________________________________________________
    multiply_2 (Multiply)           (None, 429, 64)      0           conv1d_10[0][0]                  
                                                                     dense_21[0][0]                   
    __________________________________________________________________________________________________
    conv1d_11 (Conv1D)              (None, 420, 128)     82048       multiply_2[0][0]                 
    __________________________________________________________________________________________________
    global_average_pooling1d_3 (Glo (None, 128)          0           conv1d_11[0][0]                  
    __________________________________________________________________________________________________
    dense_22 (Dense)                (None, 8)            1032        global_average_pooling1d_3[0][0] 
    __________________________________________________________________________________________________
    dense_23 (Dense)                (None, 128)          1152        dense_22[0][0]                   
    __________________________________________________________________________________________________
    multiply_3 (Multiply)           (None, 420, 128)     0           conv1d_11[0][0]                  
                                                                     dense_23[0][0]                   
    __________________________________________________________________________________________________
    max_pooling1d_4 (MaxPooling1D)  (None, 210, 128)     0           multiply_3[0][0]                 
    __________________________________________________________________________________________________
    conv1d_12 (Conv1D)              (None, 210, 64)      32832       max_pooling1d_4[0][0]            
    __________________________________________________________________________________________________
    global_average_pooling1d_4 (Glo (None, 64)           0           conv1d_12[0][0]                  
    __________________________________________________________________________________________________
    dense_24 (Dense)                (None, 4)            260         global_average_pooling1d_4[0][0] 
    __________________________________________________________________________________________________
    dense_25 (Dense)                (None, 64)           320         dense_24[0][0]                   
    __________________________________________________________________________________________________
    multiply_4 (Multiply)           (None, 210, 64)      0           conv1d_12[0][0]                  
                                                                     dense_25[0][0]                   
    __________________________________________________________________________________________________
    conv1d_13 (Conv1D)              (None, 210, 64)      16448       multiply_4[0][0]                 
    __________________________________________________________________________________________________
    global_average_pooling1d_5 (Glo (None, 64)           0           conv1d_13[0][0]                  
    __________________________________________________________________________________________________
    dense_26 (Dense)                (None, 4)            260         global_average_pooling1d_5[0][0] 
    __________________________________________________________________________________________________
    dense_27 (Dense)                (None, 64)           320         dense_26[0][0]                   
    __________________________________________________________________________________________________
    multiply_5 (Multiply)           (None, 210, 64)      0           conv1d_13[0][0]                  
                                                                     dense_27[0][0]                   
    __________________________________________________________________________________________________
    conv1d_14 (Conv1D)              (None, 210, 128)     32896       multiply_5[0][0]                 
    __________________________________________________________________________________________________
    global_average_pooling1d_6 (Glo (None, 128)          0           conv1d_14[0][0]                  
    __________________________________________________________________________________________________
    dense_28 (Dense)                (None, 8)            1032        global_average_pooling1d_6[0][0] 
    __________________________________________________________________________________________________
    dense_29 (Dense)                (None, 128)          1152        dense_28[0][0]                   
    __________________________________________________________________________________________________
    multiply_6 (Multiply)           (None, 210, 128)     0           conv1d_14[0][0]                  
                                                                     dense_29[0][0]                   
    __________________________________________________________________________________________________
    max_pooling1d_5 (MaxPooling1D)  (None, 105, 128)     0           multiply_6[0][0]                 
    __________________________________________________________________________________________________
    flatten_3 (Flatten)             (None, 13440)        0           max_pooling1d_5[0][0]            
    __________________________________________________________________________________________________
    dense_30 (Dense)                (None, 256)          3440896     flatten_3[0][0]                  
    __________________________________________________________________________________________________
    dropout_4 (Dropout)             (None, 256)          0           dense_30[0][0]                   
    __________________________________________________________________________________________________
    dense_31 (Dense)                (None, 1)            257         dropout_4[0][0]                  
    ==================================================================================================
    Total params: 3,738,665
    Trainable params: 3,738,665
    Non-trainable params: 0
    __________________________________________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_cnn1d(window_size, capsys):
    build_cnn1d(window_size)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "cnn1d"
    _________________________________________________________________
    Layer (type)                 Output Shape              Param #   
    =================================================================
    input_sequence_data (InputLa [(None, 256, 4)]          0         
    _________________________________________________________________
    conv1d_15 (Conv1D)           (None, 255, 32)           288       
    _________________________________________________________________
    batch_normalization_8 (Batch (None, 255, 32)           128       
    _________________________________________________________________
    re_lu_8 (ReLU)               (None, 255, 32)           0         
    _________________________________________________________________
    conv1d_16 (Conv1D)           (None, 254, 32)           2080      
    _________________________________________________________________
    batch_normalization_9 (Batch (None, 254, 32)           128       
    _________________________________________________________________
    re_lu_9 (ReLU)               (None, 254, 32)           0         
    _________________________________________________________________
    max_pooling1d_6 (MaxPooling1 (None, 127, 32)           0         
    _________________________________________________________________
    conv1d_17 (Conv1D)           (None, 125, 48)           4656      
    _________________________________________________________________
    batch_normalization_10 (Batc (None, 125, 48)           192       
    _________________________________________________________________
    re_lu_10 (ReLU)              (None, 125, 48)           0         
    _________________________________________________________________
    flatten_4 (Flatten)          (None, 6000)              0         
    _________________________________________________________________
    dense_32 (Dense)             (None, 512)               3072512   
    _________________________________________________________________
    dropout_5 (Dropout)          (None, 512)               0         
    _________________________________________________________________
    dense_33 (Dense)             (None, 256)               131328    
    _________________________________________________________________
    dropout_6 (Dropout)          (None, 256)               0         
    _________________________________________________________________
    dense_34 (Dense)             (None, 128)               32896     
    _________________________________________________________________
    dense_35 (Dense)             (None, 1)                 129       
    =================================================================
    Total params: 3,244,337
    Trainable params: 3,244,113
    Non-trainable params: 224
    _________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_mmnn_not_pretrained(enhancers_data, window_size, capsys):
    X_epigenomic, _, _ = enhancers_data
    build_mmnn(X_epigenomic, window_size)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "mmnn"
    __________________________________________________________________________________________________
    Layer (type)                    Output Shape         Param #     Connected to                     
    ==================================================================================================
    input_sequence_data (InputLayer [(None, 256, 4)]     0                                            
    __________________________________________________________________________________________________
    conv1d_18 (Conv1D)              (None, 255, 32)      288         input_sequence_data[0][0]        
    __________________________________________________________________________________________________
    batch_normalization_11 (BatchNo (None, 255, 32)      128         conv1d_18[0][0]                  
    __________________________________________________________________________________________________
    re_lu_11 (ReLU)                 (None, 255, 32)      0           batch_normalization_11[0][0]     
    __________________________________________________________________________________________________
    conv1d_19 (Conv1D)              (None, 254, 32)      2080        re_lu_11[0][0]                   
    __________________________________________________________________________________________________
    batch_normalization_12 (BatchNo (None, 254, 32)      128         conv1d_19[0][0]                  
    __________________________________________________________________________________________________
    re_lu_12 (ReLU)                 (None, 254, 32)      0           batch_normalization_12[0][0]     
    __________________________________________________________________________________________________
    max_pooling1d_7 (MaxPooling1D)  (None, 127, 32)      0           re_lu_12[0][0]                   
    __________________________________________________________________________________________________
    conv1d_20 (Conv1D)              (None, 125, 48)      4656        max_pooling1d_7[0][0]            
    __________________________________________________________________________________________________
    batch_normalization_13 (BatchNo (None, 125, 48)      192         conv1d_20[0][0]                  
    __________________________________________________________________________________________________
    re_lu_13 (ReLU)                 (None, 125, 48)      0           batch_normalization_13[0][0]     
    __________________________________________________________________________________________________
    flatten_5 (Flatten)             (None, 6000)         0           re_lu_13[0][0]                   
    __________________________________________________________________________________________________
    dense_38 (Dense)                (None, 512)          3072512     flatten_5[0][0]                  
    __________________________________________________________________________________________________
    dropout_7 (Dropout)             (None, 512)          0           dense_38[0][0]                   
    __________________________________________________________________________________________________
    input_epigenomic_data (InputLay [(None, 429)]        0                                            
    __________________________________________________________________________________________________
    dense_39 (Dense)                (None, 256)          131328      dropout_7[0][0]                  
    __________________________________________________________________________________________________
    dense_36 (Dense)                (None, 192)          82560       input_epigenomic_data[0][0]      
    __________________________________________________________________________________________________
    dropout_8 (Dropout)             (None, 256)          0           dense_39[0][0]                   
    __________________________________________________________________________________________________
    last_hidden_ffnn (Dense)        (None, 192)          37056       dense_36[0][0]                   
    __________________________________________________________________________________________________
    dense_40 (Dense)                (None, 128)          32896       dropout_8[0][0]                  
    __________________________________________________________________________________________________
    concatenate_3 (Concatenate)     (None, 320)          0           last_hidden_ffnn[0][0]           
                                                                     dense_40[0][0]                   
    __________________________________________________________________________________________________
    dense_42 (Dense)                (None, 128)          41088       concatenate_3[0][0]              
    __________________________________________________________________________________________________
    dense_43 (Dense)                (None, 64)           8256        dense_42[0][0]                   
    __________________________________________________________________________________________________
    dense_44 (Dense)                (None, 1)            65          dense_43[0][0]                   
    ==================================================================================================
    Total params: 3,413,233
    Trainable params: 3,413,009
    Non-trainable params: 224
    __________________________________________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_mmnn_pretrained(enhancers_data, window_size, capsys):
    X_epigenomic, _, _ = enhancers_data
    models = {
        "ffnn": build_ffnn(X_epigenomic),
        "cnn1d": build_cnn1d(window_size)
    }
    build_mmnn(models=models, pretrained=True)["model"].summary()

    captured = capsys.readouterr()
    cps = captured.out.split("\n")
    comp = """Model: "mmnn"
    __________________________________________________________________________________________________
    Layer (type)                    Output Shape         Param #     Connected to                     
    ==================================================================================================
    input_sequence_data (InputLayer [(None, 256, 4)]     0                                            
    __________________________________________________________________________________________________
    conv1d_21 (Conv1D)              (None, 255, 32)      288         input_sequence_data[0][0]        
    __________________________________________________________________________________________________
    batch_normalization_14 (BatchNo (None, 255, 32)      128         conv1d_21[0][0]                  
    __________________________________________________________________________________________________
    re_lu_14 (ReLU)                 (None, 255, 32)      0           batch_normalization_14[0][0]     
    __________________________________________________________________________________________________
    conv1d_22 (Conv1D)              (None, 254, 32)      2080        re_lu_14[0][0]                   
    __________________________________________________________________________________________________
    batch_normalization_15 (BatchNo (None, 254, 32)      128         conv1d_22[0][0]                  
    __________________________________________________________________________________________________
    re_lu_15 (ReLU)                 (None, 254, 32)      0           batch_normalization_15[0][0]     
    __________________________________________________________________________________________________
    max_pooling1d_8 (MaxPooling1D)  (None, 127, 32)      0           re_lu_15[0][0]                   
    __________________________________________________________________________________________________
    conv1d_23 (Conv1D)              (None, 125, 48)      4656        max_pooling1d_8[0][0]            
    __________________________________________________________________________________________________
    batch_normalization_16 (BatchNo (None, 125, 48)      192         conv1d_23[0][0]                  
    __________________________________________________________________________________________________
    re_lu_16 (ReLU)                 (None, 125, 48)      0           batch_normalization_16[0][0]     
    __________________________________________________________________________________________________
    flatten_6 (Flatten)             (None, 6000)         0           re_lu_16[0][0]                   
    __________________________________________________________________________________________________
    dense_47 (Dense)                (None, 512)          3072512     flatten_6[0][0]                  
    __________________________________________________________________________________________________
    dropout_9 (Dropout)             (None, 512)          0           dense_47[0][0]                   
    __________________________________________________________________________________________________
    input_epigenomic_data (InputLay [(None, 429)]        0                                            
    __________________________________________________________________________________________________
    dense_48 (Dense)                (None, 256)          131328      dropout_9[0][0]                  
    __________________________________________________________________________________________________
    dense_45 (Dense)                (None, 192)          82560       input_epigenomic_data[0][0]      
    __________________________________________________________________________________________________
    dropout_10 (Dropout)            (None, 256)          0           dense_48[0][0]                   
    __________________________________________________________________________________________________
    last_hidden_ffnn (Dense)        (None, 192)          37056       dense_45[0][0]                   
    __________________________________________________________________________________________________
    dense_49 (Dense)                (None, 128)          32896       dropout_10[0][0]                 
    __________________________________________________________________________________________________
    concatenate_4 (Concatenate)     (None, 320)          0           last_hidden_ffnn[0][0]           
                                                                     dense_49[0][0]                   
    __________________________________________________________________________________________________
    dense_51 (Dense)                (None, 128)          41088       concatenate_4[0][0]              
    __________________________________________________________________________________________________
    dense_52 (Dense)                (None, 64)           8256        dense_51[0][0]                   
    __________________________________________________________________________________________________
    dense_53 (Dense)                (None, 1)            65          dense_52[0][0]                   
    ==================================================================================================
    Total params: 3,413,233
    Trainable params: 3,413,009
    Non-trainable params: 224
    __________________________________________________________________________________________________""".split("\n")
    for c1, c2 in zip(cps, comp):
        assert c1.strip() == c2.strip()


def test_build_ffnn_hp(random_dataset):
    X_train, X_valid, _, y_train, y_valid, _ = random_dataset

    model_builder = lambda hp: build_ffnn_hp(X_train, hp)

    tuner = Hyperband(
        model_builder,
        objective=kt.Objective("val_AUPRC", direction="max"),
        max_epochs=1,
        factor=3,
        directory='tuner',
        project_name='ffnn_test',
        overwrite=True
    )

    tuner.search(
        X_train, y_train,
        validation_data=(X_valid, y_valid),
        epochs=1,
        batch_size=256
    )

    best_hp = tuner.get_best_hyperparameters(num_trials=1)[0]
    assert best_hp["n_neurons0"] > 0


def test_build_cnn1d_hp(enhancers_data, window_size, genome):
    X_epigenomic, bed, y = enhancers_data
    sequence = get_cnn_sequence(
        genome, bed, y.values.ravel()
    )

    model_builder = lambda hp: build_cnn1d_hp(window_size, hp)

    tuner = Hyperband(
        model_builder,
        objective=kt.Objective("AUPRC", direction="max"),
        max_epochs=1,
        factor=3,
        directory='tuner',
        project_name='cnn1d_test',
        overwrite=True
    )

    tuner.search(
        sequence,
        epochs=1,
        batch_size=256
    )

    best_hp = tuner.get_best_hyperparameters(num_trials=1)[0]
    assert best_hp["n_neurons0"] > 0
